{"version":3,"sources":["Components/Layouts.js","components/MaterialFixedLabelTextbox.js","components/MaterialButtonPrimary1.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["React","Component","styled","div","span","input","App","props","clicked","obj","axios","post","classroom_name","current_light_configuration","light_configuration","then","response","console","log","error","state","json_object","classroom","get","data","setState","className","this","map","onClick","style","width","height","padding","color","fontSize","marginBottom","layout_name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"+PAIqCA,IAAMC,U,y1BCQzBC,IAAOC,IAAV,KASDD,IAAOE,KAAV,KAWQF,IAAOG,MAAV,K,gdCrBEH,IAAOC,IAAV,KAaCD,IAAOE,KAAV,KAbb,ICAqBE,E,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAyBRC,QAAQ,SAACC,GAEPC,IAAMC,KAAN,uCAAkD,CAACC,eAAe,QAASC,4BAA4BJ,EAAIK,sBAC1GC,MAAK,SAACC,GACLC,QAAQC,IAAIF,MACX,SAACG,GACFF,QAAQC,IAAI,gBACZD,QAAQC,IAAIC,OA/Bd,EAAKC,MAAM,CACTC,YAAY,GACZC,UAAW,IAJG,E,iFAOE,IAAD,OACjBZ,IAAMa,IAAN,mCACCR,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASQ,MAErB,EAAKC,SAAS,CAACJ,YAAYL,EAASQ,UAEnC,SAACL,GACFF,QAAQC,IAAIC,MAEdT,IAAMa,IAAN,8CACCR,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASQ,MAErB,EAAKC,SAAS,CAACH,UAAUN,EAASQ,KAAK,QACtC,SAACL,GACFF,QAAQC,IAAIC,Q,+BAaP,IAAD,OACR,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAEhB,2BACIC,KAAKP,MAAME,UAAUV,gBAE9Be,KAAKP,MAAMC,YAAYO,KAAI,SAAAnB,GAAG,OAAE,4BAAQD,QAAQ,QAAQqB,QAAS,kBAAI,EAAKrB,QAAQC,IAAMqB,MAAO,CAC1FC,MAAO,IACPC,OAAQ,GACRC,QAAQ,GACRC,MAAO,OACPC,SAAS,GACTC,aAAa,IACX3B,EAAI4B,sB,GApDmBpC,aCCbqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLF,QAAQE,MAAMA,EAAMkC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.b6940d7f.chunk.js","sourcesContent":["import React from 'react';\nimport Link from 'react-dom'\nimport axios from 'axios';\n\nexport default class Layouts extends React.Component {\n  state = {\n    layouts: []\n  }\n\n  componentDidMount() {\n    axios.get(`https://10.42.0.1:4000/light/all`)\n      .then(res => {\n        console.log(res.body);\n        const layouts = res.data;\n        this.setState({ layouts });\n      })\n  }\n\n  render() {\n    return (\n        <div>\n        {this.state.layouts.map((e) => (\n            <Link key={e.layout_name} to={this.setProfile(e.user.attributes.username)}>\n              <button type=\"button\">{e.user.attributes.username}</button>\n            </Link>\n          ))}\n        </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nfunction MaterialFixedLabelTextbox(props) {\n  return (\n    <Container {...props}>\n      <Label>{props.text1 || \"FixedLabel\"}</Label>\n      <InputStyle placeholder={props.textInput1 || undefined}></InputStyle>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  background-color: transparent;\n  flex-direction: row;\n  padding-left: 16px;\n  border-color: #D9D5DC;\n  border-bottom-width: 1px;\n`;\n\nconst Label = styled.span`\n  font-family: Roboto;\n  color: #000;\n  align-self: flex-start;\n  opacity: 0.5;\n  padding-top: 16px;\n  padding-bottom: 8px;\n  font-size: 16px;\n  line-height: 16px;\n`;\n\nconst InputStyle = styled.input`\n  font-family: Roboto;\n  flex: 1 1 0%;\n  color: #000;\n  align-self: stretch;\n  padding-top: 14px;\n  padding-right: 5px;\n  padding-bottom: 8px;\n  padding-left: 30px;\n  font-size: 16px;\n  line-height: 16px;\n  border: none;\n  background: transparent;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default MaterialFixedLabelTextbox;\n","import React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nfunction MaterialButtonPrimary1(props) {\n  return (\n    <Container {...props}>\n      <Caption>BUTTON</Caption>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  background-color: #2196F3;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  padding-right: 16px;\n  padding-left: 16px;\n  min-width: 88px;\n  border-radius: 2px;\n  box-shadow: 0px 1px 5px  0.35px #000 ;\n`;\n\nconst Caption = styled.span`\n  font-family: Roboto;\n  color: #fff;\n  font-size: 14px;\n`;\n\nexport default MaterialButtonPrimary1;\n","import React, { Component } from 'react';\nimport Link from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from './Components/Layouts'\nimport Test from './test';\nimport { render } from '@testing-library/react';\nimport MaterialButtonPrimary1 from './components/MaterialButtonPrimary1';\n\nimport axios from 'axios';\n\nexport default class App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      json_object:[],\n      classroom: {}\n    };  \n  }\n  componentDidMount(){\n    axios.get(`http://localhost:4000/light/all`)\n    .then((response) => {\n      console.log(response.data);\n      // alert(response.data);\n      this.setState({json_object:response.data});\n\n    }, (error) => {\n      console.log(error);\n    });\n    axios.get(`http://localhost:4000/light/current_config`)\n    .then((response) => {\n      console.log(response.data);\n      // alert(response.data);\n      this.setState({classroom:response.data[0]});\n    }, (error) => {\n      console.log(error);\n    });\n  }\n  clicked=(obj)=>{\n    // alert(obj);\n    axios.post(`http://localhost:4000/light/activate`,{classroom_name:\"h-105\", current_light_configuration:obj.light_configuration})\n    .then((response) => {\n      console.log(response);\n    }, (error) => {\n      console.log('nhi hua kuch');\n      console.log(error);\n    });\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <p>\n           {this.state.classroom.classroom_name}\n        </p>\n  {this.state.json_object.map(obj=><button clicked='false' onClick={()=>this.clicked(obj)} style={{\n        width: 200,\n        height: 50,\n        padding:10,\n        color: 'blue',\n        fontSize:20,\n        marginBottom:5\n      }}>{obj.layout_name}</button>\n )}\n      </header>\n    </div>\n  );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}